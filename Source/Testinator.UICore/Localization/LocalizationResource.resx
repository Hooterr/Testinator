<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAnswerButton" xml:space="preserve">
    <value>+ Add Answer</value>
  </data>
  <data name="AddMultipleCheckboxesQuestionIntroduction" xml:space="preserve">
    <value>Write the question task and every answer and check which of them are right.</value>
  </data>
  <data name="AddMultipleChoiceQuestionIntroduction" xml:space="preserve">
    <value>Write the question task and every answer and check which one is right.</value>
  </data>
  <data name="AddNewQuestion" xml:space="preserve">
    <value>Add new question</value>
  </data>
  <data name="AddQuestion" xml:space="preserve">
    <value>Add question</value>
  </data>
  <data name="AddSingleTextboxQuestionIntroduction" xml:space="preserve">
    <value>Write the question task and an answer which is correct.</value>
  </data>
  <data name="AttachCriteriaTitle" xml:space="preserve">
    <value>Attach criteria to the test</value>
  </data>
  <data name="BackToTestList" xml:space="preserve">
    <value>Back to test list</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelChanges" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChooseQuestionType" xml:space="preserve">
    <value>Choose question type</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="ConfirmChanges" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="CreateNewCriteria" xml:space="preserve">
    <value>Create new criteria</value>
  </data>
  <data name="CreateNewTest" xml:space="preserve">
    <value>Create new test</value>
  </data>
  <data name="EditCriteria" xml:space="preserve">
    <value>Edit criteria</value>
  </data>
  <data name="EditTest" xml:space="preserve">
    <value>Edit test</value>
  </data>
  <data name="FillData" xml:space="preserve">
    <value>Fill the data</value>
  </data>
  <data name="FinishQuestionAdding" xml:space="preserve">
    <value>Finish question adding</value>
  </data>
  <data name="InfoAboutTest" xml:space="preserve">
    <value>Test informations</value>
  </data>
  <data name="MarkAName" xml:space="preserve">
    <value>Grade A</value>
  </data>
  <data name="MarkBName" xml:space="preserve">
    <value>Grade B</value>
  </data>
  <data name="MarkCName" xml:space="preserve">
    <value>Grade C</value>
  </data>
  <data name="MarkDName" xml:space="preserve">
    <value>Grade D</value>
  </data>
  <data name="MarkEName" xml:space="preserve">
    <value>Grade E</value>
  </data>
  <data name="MarkFName" xml:space="preserve">
    <value>Grade F</value>
  </data>
  <data name="MaxPointsTitle" xml:space="preserve">
    <value>Max points: </value>
  </data>
  <data name="MultipleCheckboxesQuestion" xml:space="preserve">
    <value>Multiple checkboxes question</value>
  </data>
  <data name="MultipleChoiceQuestion" xml:space="preserve">
    <value>Multiple choice question</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name: </value>
  </data>
  <data name="NextQuestion" xml:space="preserve">
    <value>Next question</value>
  </data>
  <data name="PointsCount" xml:space="preserve">
    <value>Total points: </value>
  </data>
  <data name="PointsSemicolon" xml:space="preserve">
    <value>Points: </value>
  </data>
  <data name="QuestionCount" xml:space="preserve">
    <value>Questions: </value>
  </data>
  <data name="RightAnswerSemicolon" xml:space="preserve">
    <value>RightAnswer: </value>
  </data>
  <data name="SaveQuestion" xml:space="preserve">
    <value>Save the question</value>
  </data>
  <data name="SaveTest" xml:space="preserve">
    <value>Save the test</value>
  </data>
  <data name="SendTest" xml:space="preserve">
    <value>Send test</value>
  </data>
  <data name="SingleTextboxQuestion" xml:space="preserve">
    <value>Single answer question</value>
  </data>
  <data name="SingleTextboxQuestionTooltip" xml:space="preserve">
    <value>User writes an answer in the textbox</value>
  </data>
  <data name="StartTest" xml:space="preserve">
    <value>Start test</value>
  </data>
  <data name="SuccessfulTestAdd" xml:space="preserve">
    <value>Successfully added the test!</value>
  </data>
  <data name="TestDurationInMinutes" xml:space="preserve">
    <value>Time for test [min]</value>
  </data>
  <data name="TestEditorTitle" xml:space="preserve">
    <value>Test Editor</value>
  </data>
  <data name="TestName" xml:space="preserve">
    <value>Name of the test</value>
  </data>
  <data name="TestReceivedMessage" xml:space="preserve">
    <value>You have received a test!</value>
  </data>
  <data name="TimeDuration" xml:space="preserve">
    <value>Time: </value>
  </data>
  <data name="WaitingForConnection" xml:space="preserve">
    <value>Waiting for connection with server</value>
  </data>
  <data name="WaitingForTest" xml:space="preserve">
    <value>Waiting for the test</value>
  </data>
  <data name="WriteUsername" xml:space="preserve">
    <value>Write your username</value>
  </data>
  <data name="WriteUserSurname" xml:space="preserve">
    <value>Write your Surname</value>
  </data>
  <data name="BackToTestEditor" xml:space="preserve">
    <value>Go back to test editor</value>
  </data>
  <data name="CreateNewCriteriaOrEditExisting" xml:space="preserve">
    <value>Create new criteria or edit existing one</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="InvalidDataError" xml:space="preserve">
    <value>Invalid data in inputs.</value>
  </data>
  <data name="IsMarkACountedQuestion" xml:space="preserve">
    <value>Count Mark A?</value>
  </data>
  <data name="ValuesCountedInPercent" xml:space="preserve">
    <value>Input values are counted in %: </value>
  </data>
  <data name="WriteName" xml:space="preserve">
    <value>Write name</value>
  </data>
  <data name="ResultTitle" xml:space="preserve">
    <value>Test results</value>
  </data>
  <data name="TrySemicolon" xml:space="preserve">
    <value>Try: </value>
  </data>
</root>